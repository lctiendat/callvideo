<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.1/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.8.1/font/bootstrap-icons.css">
    <style>
        #my-camera,
        #friend-camera {
            width: 100%;
            max-height: 400px;
            background: #000;
        }

        #btn-call {
            min-width: 100px;
            min-height: 50px;
        }

        #my-action li {
            font-size: 20px;
            background: red;
            padding: 10px;
            color: white;
            margin-left: 20px;
            border-radius: 50%;
        }

        #friend-action li {
            font-size: 20px;
            background: green;
            padding: 10px;
            color: white;
            margin-left: 20px;
            border-radius: 50%;
        }

        #friend-action {
            left: 35%;
            margin-left: -20px;
        }
    </style>
</head>

<body>
    <div class="container mt-3">
        <div class="row">
            <h6>My Room : <span id="my-room"></span> </h6>
        </div>
        <div class="row text-center mt-5">
            <div class="col-6">
                <video id="my-camera" autoplay playsinline></video>
                <div class="row d-none" id="my-action">
                    <div class="col-12">
                        <ul class="nav d-flex justify-content-center">
                            <li class="bi bi-volume-down action-volume"></li>
                            <li class="bi bi-telephone action-turn"></li>
                            <li class="bi bi-camera-video action-camera"></li>
                        </ul>
                    </div>
                </div>
            </div>
            <div class="col-6">
                <video id="friend-camera" autoplay playsinline>

                </video>
                <div class="row d-none" id="friend-action">
                    <div class="col-12">
                        <ul class="nav d-flex justify-content-center">
                            <li class="bi bi-volume-down action-volume"></li>
                            <li class="bi bi-telephone action-turn"></li>
                            <li class="bi bi-camera-video action-camera"></li>
                        </ul>
                    </div>
                </div>
            </div>
            <div class="col-12">
                <button class="btn btn-primary mt-5" id="btn-call"><i class="bi bi-camera-video"></i></button>
            </div>
        </div>
    </div>
</body>

</html>
<script src="https://cdn.jsdelivr.net/npm/jquery@3.6.0/dist/jquery.slim.min.js"></script>
<script src="//cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://cdn.socket.io/4.4.1/socket.io.min.js"></script>
<script src=" https://unpkg.com/peerjs@1.3.1/dist/peerjs.min.js "></script>
<script>
    const socket = io('http://localhost:3000', {
        'reconnection': true,
        'reconnectionDelay': 1000,
        'reconnectionDelayMax': 5000,
        'reconnectionAttempts': 5
    });
    const shortId = Math.floor(Math.random() * 100000000)
    const peer = new Peer(shortId)
    const myCamera = $('#my-camera')
    const friendCamera = $('#friend-camera')
    const btnCall = $('#btn-call')
    const actionVolume = $('#my-action .action-volume')
    const actionTurn = $('#my-action .action-turn')
    const actionCamera = $('#my-action .action-camera')
    const friendActionVolume = $('#friend-action .action-volume')
    const friendActionTurn = $('#friend-action .action-turn')
    const friendActionCamera = $('#friend-action .action-camera')
    let mediaRecorder
    let recordedBlobs = []

    function getMediaStream() {
        return navigator.mediaDevices.getUserMedia({
            video: true,
            audio: true
        });
    }

    function playStream(pos, stream) {
        return pos.get(0).srcObject = stream;
    }

    function startRecording(stream) {
        try {
            mediaRecorder = new MediaRecorder(stream, {
                mimeType: 'video/webm;codecs=vp9,opus',
            });
            mediaRecorder.ondataavailable = e => {
                recordedBlobs.push(e.data)
            }
            mediaRecorder.start();
            console.log('MediaRecorder started', mediaRecorder.state);
            console.log('MediaRecorder started', mediaRecorder);
        } catch (e) {
            console.error('Exception while creating MediaRecorder:', e);
            return;
        }
    }

    function stopRecording() {
        mediaRecorder.stop();

        console.log('Recorded Blobs: ', recordedBlobs);
        const blob = new Blob(recordedBlobs, { type: 'video/webm' });
        console.log('Blob: ', blob);
        const url = window.URL.createObjectURL(blob);
        console.log('URL: ', url);
        const a = document.createElement('a');
        a.style.display = 'none';
        a.href = url;
        a.download = 'test.webm';
        document.body.appendChild(a);
        //a.click();

    }

    const listRoom = new Promise((res, rej) => {
        socket.on('list-room', data => {
            res(data)
        })
    })

    socket.on('connect', () => {
        socket.on('reject-call', data => {
            Swal.fire({
                icon: 'error',
                title: ':(',
                text: 'The other party rejected the call',
            })
            $('#my-action,#friend-action').addClass('d-none')
            btnCall.removeClass('d-none')
            playStream(myCamera, null)
        })

        // action volume
        socket.on('volume-action', data => {
            console.log(data);
            if (data == 1) {
                friendActionCamera.addClass('bi-volume-mute').removeClass('bi-volume-down')
                getMediaStream().then(stream => {
                    stream.getAudioTracks()[0].enabled = false
                    playStream(friendCamera, stream)
                })
            }
            else {
                friendActionCamera.removeClass('bi-volume-mute').addClass('bi-volume-down')
                getMediaStream().then(stream => {
                    stream.getAudioTracks()[0].enabled = true
                    playStream(friendCamera, stream)
                })
            }
        })

        // action camera
        socket.on('camera-action', data => {
            if (data == 1) {
                friendActionCamera.addClass('bi-camera-video-off').removeClass('bi-camera-video')
                getMediaStream().then(stream => {
                    stream.getVideoTracks()[0].enabled = false
                    playStream(friendCamera, stream)
                })
            }
            else {
                friendActionCamera.removeClass('bi-camera-video-off').addClass('bi-camera-video')
                getMediaStream().then(stream => {
                    stream.getVideoTracks()[0].enabled = true
                    playStream(friendCamera, stream)
                })
            }
        })

        //cancel call
        socket.on('cancel-call', data => {
            Swal.fire({
                icon: 'error',
                title: ':(',
                text: 'The other party canceled the call',
            })
            $('#my-action,#friend-action').addClass('d-none')
            btnCall.removeClass('d-none')
            playStream(myCamera, null)
            playStream(friendCamera, null)
        })
        

        // socket.on('client-disconnect', data => {
        //     alert(data)
        // })
    });

    // receiver call
    peer.on('call', call => {
        Swal.fire({
            title: 'New Call',
            text: "You are on a call",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: 'green',
            cancelButtonColor: 'red',
            confirmButtonText: 'Accept',
            cancelButtonText: 'Reject'
        }).then((result) => {
            if (result.isConfirmed) {
                $('#friend-action').removeClass('d-none')
                btnCall.addClass('d-none')
                $('#my-action').removeClass('d-none');
                getMediaStream().then(stream => {
                    startRecording(stream)
                    call.answer(stream);
                    playStream(myCamera, stream);
                    localStorage.setItem('myCamera', stream)
                    call.on('stream', friendStream => {
                        playStream(friendCamera, friendStream);
                    });
                });
            }
            else {
                socket.emit('reject-call', 1)
            }
        })
    });

    peer.on('open', id => {
        $('#my-room').append(` ${id}`)
        socket.emit('create-room', id)
    })

    // DOM
    $(document).on('click', '#btn-call', () => {
        const friendId = prompt('Enter your friend id').trim();
        if (friendId === '' || friendId == $('#my-room').text().trim()) {
            alert('Room ID is invalid');
        }
        else {
            socket.emit('join-room', friendId);
            localStorage.setItem('roomID', friendId)
            $('#my-action').removeClass('d-none');
            $('#friend-action').removeClass('d-none')
            btnCall.addClass('d-none')
            getMediaStream().then(stream => {
                startRecording(stream)
                playStream(myCamera, stream)
                const call = peer.call(friendId, stream);
                call.on('stream', friendStream => {
                    playStream(friendCamera, friendStream);
                })
            })
        }
    });

    actionVolume.click(e => {
        actionVolume.toggleClass('bi-volume-mute bi-volume-down')
        actionVolume.hasClass('bi-volume-mute') ? socket.emit('volume-action', 1) : socket.emit('volume-action', 0)
    })

    actionCamera.click(e => {
        actionCamera.toggleClass('bi-camera-video-off bi-camera-video')
        if (actionCamera.hasClass('bi-camera-video-off')) {
            socket.emit('camera-action', 1)
            getMediaStream().then(stream => {
                stream.getVideoTracks()[0].enabled = false
                playStream(myCamera, stream)
            })
        }
        else {
            socket.emit('camera-action', 0)
            getMediaStream().then(stream => {
                stream.getVideoTracks()[0].enabled = true
                playStream(myCamera, stream)
            })
        }
    })

    actionTurn.click(e => {
        stopRecording()
        playStream(myCamera, null)
        playStream(friendCamera, null)
        socket.emit('cancel-call', localStorage.getItem('roomID'))
        $('#my-action,#friend-action').addClass('d-none')
        btnCall.removeClass('d-none')
        setTimeout(() => {
            Swal.fire({
                title: 'Call Back',
                text: "Would you like to call back?",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: 'green',
                cancelButtonColor: 'red',
                confirmButtonText: 'Accept',
                cancelButtonText: 'Reject'
            }).then((result) => {
                if (result.isConfirmed) {
                    listRoom.then(data => {
                        if (data.includes(localStorage.getItem('roomID'))) {
                            $('#my-action,#friend-action').removeClass('d-none')
                            btnCall.addClass('d-none')
                            getMediaStream().then(stream => {
                                playStream(myCamera, stream)
                                startRecording()
                                const call = peer.call((() => {
                                    if (localStorage.getItem('roomID') === $('#my-room').text().trim()) {
                                        data.splice(data.indexOf(localStorage.getItem('roomID')), 1)
                                        return data[0]
                                    }
                                    else {
                                        return localStorage.getItem('roomID')
                                    }
                                })(), stream);
                                call.on('stream', friendStream => {
                                    playStream(friendCamera, friendStream);
                                })
                            })
                        }
                        else {
                            console.log(data);
                            alert('The opponent has disconnected')
                            $('#my-action,#friend-action').addClass('d-none')
                            btnCall.removeClass('d-none')
                        }
                    })
                }
            })
        }, 2000);
    })

</script>